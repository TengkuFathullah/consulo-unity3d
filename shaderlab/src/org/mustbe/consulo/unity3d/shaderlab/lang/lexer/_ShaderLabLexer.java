/* The following code was generated by JFlex 1.4.4 on 09.05.15 3:32 */

package org.mustbe.consulo.unity3d.shaderlab.lang.lexer;

import java.util.*;
import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.unity3d.shaderlab.lang.psi.ShaderLabTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 09.05.15 3:32 from the specification file
 * <tt>R:/_github.com/consulo/consulo-unity3d/shaderlab/src/org/mustbe/consulo/unity3d/shaderlab/lang/lexer/ShaderLabLexer.flex</tt>
 */
public class _ShaderLabLexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SHADERSCRIPT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\2\1\4\1\0\1\2\1\4\16\20\4\0\1\2\1\0"+
    "\1\15\1\5\1\17\3\0\1\45\1\46\1\14\1\21\1\51\1\21"+
    "\1\22\1\3\12\1\3\0\1\52\3\0\1\7\1\34\1\35\1\25"+
    "\1\26\1\32\1\13\1\24\1\12\1\17\1\36\1\33\1\42\1\11"+
    "\1\30\1\27\1\17\1\10\1\23\1\31\1\37\1\17\1\6\1\41"+
    "\1\17\1\40\1\47\1\16\1\50\1\0\1\17\1\0\1\7\1\34"+
    "\1\35\1\25\1\26\1\32\1\13\1\24\1\12\1\17\1\36\1\33"+
    "\1\42\1\11\1\30\1\27\1\17\1\10\1\23\1\31\1\37\1\17"+
    "\1\6\1\41\1\17\1\40\1\43\1\0\1\44\1\0\41\20\2\0"+
    "\4\17\4\0\1\17\2\0\1\20\7\0\1\17\4\0\1\17\5\0"+
    "\27\17\1\0\37\17\1\0\u013f\17\31\0\162\17\4\0\14\17\16\0"+
    "\5\17\11\0\1\17\21\0\130\20\5\0\23\20\12\0\1\17\13\0"+
    "\1\17\1\0\3\17\1\0\1\17\1\0\24\17\1\0\54\17\1\0"+
    "\46\17\1\0\5\17\4\0\202\17\1\0\4\20\3\0\105\17\1\0"+
    "\46\17\2\0\2\17\6\0\20\17\41\0\46\17\2\0\1\17\7\0"+
    "\47\17\11\0\21\20\1\0\27\20\1\0\3\20\1\0\1\20\1\0"+
    "\2\20\1\0\1\20\13\0\33\17\5\0\3\17\15\0\4\20\14\0"+
    "\6\20\13\0\32\17\5\0\13\17\16\20\7\0\12\20\4\0\2\17"+
    "\1\20\143\17\1\0\1\17\10\20\1\0\6\20\2\17\2\20\1\0"+
    "\4\20\2\17\12\20\3\17\2\0\1\17\17\0\1\20\1\17\1\20"+
    "\36\17\33\20\2\0\3\17\60\0\46\17\13\20\1\17\u014f\0\3\20"+
    "\66\17\2\0\1\20\1\17\20\20\2\0\1\17\4\20\3\0\12\17"+
    "\2\20\2\0\12\20\21\0\3\20\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\1\17\3\0\4\17\2\0\1\20\1\17"+
    "\7\20\2\0\2\20\2\0\3\20\11\0\1\20\4\0\2\17\1\0"+
    "\3\17\2\20\2\0\12\20\4\17\15\0\3\20\1\0\6\17\4\0"+
    "\2\17\2\0\26\17\1\0\7\17\1\0\2\17\1\0\2\17\1\0"+
    "\2\17\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\13\0"+
    "\4\17\1\0\1\17\7\0\14\20\3\17\14\0\3\20\1\0\11\17"+
    "\1\0\3\17\1\0\26\17\1\0\7\17\1\0\2\17\1\0\5\17"+
    "\2\0\1\20\1\17\10\20\1\0\3\20\1\0\3\20\2\0\1\17"+
    "\17\0\2\17\2\20\2\0\12\20\1\0\1\17\17\0\3\20\1\0"+
    "\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0\2\17\1\0"+
    "\5\17\2\0\1\20\1\17\6\20\3\0\2\20\2\0\3\20\10\0"+
    "\2\20\4\0\2\17\1\0\3\17\4\0\12\20\1\0\1\17\20\0"+
    "\1\20\1\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0\2\17"+
    "\1\0\1\17\1\0\2\17\3\0\2\17\3\0\3\17\3\0\10\17"+
    "\1\0\3\17\4\0\5\20\3\0\3\20\1\0\4\20\11\0\1\20"+
    "\17\0\11\20\11\0\1\17\7\0\3\20\1\0\10\17\1\0\3\17"+
    "\1\0\27\17\1\0\12\17\1\0\5\17\4\0\7\20\1\0\3\20"+
    "\1\0\4\20\7\0\2\20\11\0\2\17\4\0\12\20\22\0\2\20"+
    "\1\0\10\17\1\0\3\17\1\0\27\17\1\0\12\17\1\0\5\17"+
    "\2\0\1\20\1\17\7\20\1\0\3\20\1\0\4\20\7\0\2\20"+
    "\7\0\1\17\1\0\2\17\4\0\12\20\22\0\2\20\1\0\10\17"+
    "\1\0\3\17\1\0\27\17\1\0\20\17\4\0\6\20\2\0\3\20"+
    "\1\0\4\20\11\0\1\20\10\0\2\17\4\0\12\20\22\0\2\20"+
    "\1\0\22\17\3\0\30\17\1\0\11\17\1\0\1\17\2\0\7\17"+
    "\3\0\1\20\4\0\6\20\1\0\1\20\1\0\10\20\22\0\2\20"+
    "\15\0\60\17\1\20\2\17\7\20\4\0\10\17\10\20\1\0\12\20"+
    "\47\0\2\17\1\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17"+
    "\6\0\4\17\1\0\7\17\1\0\3\17\1\0\1\17\1\0\1\17"+
    "\2\0\2\17\1\0\4\17\1\20\2\17\6\20\1\0\2\20\1\17"+
    "\2\0\5\17\1\0\1\17\1\0\6\20\2\0\12\20\2\0\2\17"+
    "\42\0\1\17\27\0\2\20\6\0\12\20\13\0\1\20\1\0\1\20"+
    "\1\0\1\20\4\0\2\20\10\17\1\0\42\17\6\0\24\20\1\0"+
    "\2\20\4\17\4\0\10\20\1\0\44\20\11\0\1\20\71\0\42\17"+
    "\1\0\5\17\1\0\2\17\1\0\7\20\3\0\4\20\6\0\12\20"+
    "\6\0\6\17\4\20\106\0\46\17\12\0\51\17\7\0\132\17\5\0"+
    "\104\17\5\0\122\17\6\0\7\17\1\0\77\17\1\0\1\17\1\0"+
    "\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\47\17\1\0"+
    "\1\17\1\0\4\17\2\0\37\17\1\0\1\17\1\0\4\17\2\0"+
    "\7\17\1\0\1\17\1\0\4\17\2\0\7\17\1\0\7\17\1\0"+
    "\27\17\1\0\37\17\1\0\1\17\1\0\4\17\2\0\7\17\1\0"+
    "\47\17\1\0\23\17\16\0\11\20\56\0\125\17\14\0\u026c\17\2\0"+
    "\10\17\12\0\32\17\5\0\113\17\3\0\3\17\17\0\15\17\1\0"+
    "\4\17\3\20\13\0\22\17\3\20\13\0\22\17\2\20\14\0\15\17"+
    "\1\0\3\17\1\0\2\20\14\0\64\17\40\20\3\0\1\17\3\0"+
    "\2\17\1\20\2\0\12\20\41\0\3\20\2\0\12\20\6\0\130\17"+
    "\10\0\51\17\1\20\126\0\35\17\3\0\14\20\4\0\14\20\12\0"+
    "\12\20\36\17\2\0\5\17\u038b\0\154\17\224\0\234\17\4\0\132\17"+
    "\6\0\26\17\2\0\6\17\2\0\46\17\2\0\6\17\2\0\10\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\37\17\2\0\65\17"+
    "\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17\3\0\4\17"+
    "\2\0\6\17\4\0\15\17\5\0\3\17\1\0\7\17\17\0\4\20"+
    "\32\0\5\20\20\0\2\17\23\0\1\17\13\0\4\20\6\0\6\20"+
    "\1\0\1\17\15\0\1\17\40\0\22\17\36\0\15\20\4\0\1\20"+
    "\3\0\6\20\27\0\1\17\4\0\1\17\2\0\12\17\1\0\1\17"+
    "\3\0\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0\4\17"+
    "\1\0\3\17\1\0\7\17\3\0\3\17\5\0\5\17\26\0\44\17"+
    "\u0e81\0\3\17\31\0\11\17\6\20\1\0\5\17\2\0\5\17\4\0"+
    "\126\17\2\0\2\20\2\0\3\17\1\0\137\17\5\0\50\17\4\0"+
    "\136\17\21\0\30\17\70\0\20\17\u0200\0\u19b6\17\112\0\u51a6\17\132\0"+
    "\u048d\17\u0773\0\u2ba4\17\u215c\0\u012e\17\2\0\73\17\225\0\7\17\14\0"+
    "\5\17\5\0\1\17\1\20\12\17\1\0\15\17\1\0\5\17\1\0"+
    "\1\17\1\0\2\17\1\0\2\17\1\0\154\17\41\0\u016b\17\22\0"+
    "\100\17\2\0\66\17\50\0\15\17\3\0\20\20\20\0\4\20\17\0"+
    "\2\17\30\0\3\17\31\0\1\17\6\0\5\17\1\0\207\17\2\0"+
    "\1\20\4\0\1\17\13\0\12\20\7\0\32\17\4\0\1\17\1\0"+
    "\32\17\12\0\132\17\3\0\6\17\2\0\6\17\2\0\6\17\2\0"+
    "\3\17\3\0\2\17\3\0\2\17\22\0\3\20\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\1\1\4\1\5\2\1"+
    "\13\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\16\1\4\1\0\1\17\1\20\1\0\2\5"+
    "\1\2\6\4\1\21\13\4\3\0\6\4\1\22\14\4"+
    "\1\0\1\20\1\0\4\4\1\23\1\4\1\24\3\4"+
    "\1\25\4\4\1\26\2\4\2\0\3\4\1\27\2\4"+
    "\1\30\4\4\1\31\2\4\1\32\1\0\1\33\10\4"+
    "\1\34\1\35\1\0\13\4\1\36\1\37\4\4\1\40"+
    "\1\4\1\41\1\42\1\4\1\43\1\44\3\4\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\126\0\126"+
    "\0\126\0\126\0\126\0\126\0\126\0\126\0\126\0\u03b2"+
    "\0\126\0\u01ae\0\u03dd\0\u0408\0\u0433\0\126\0\u045e\0\u0489"+
    "\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u012d\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u012d\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\126\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u012d"+
    "\0\u0c18\0\u012d\0\u0c43\0\u0c6e\0\u0c99\0\u012d\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u012d\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u012d\0\u0e9d\0\u0ec8\0\u012d\0\u0ef3\0\u0f1e"+
    "\0\u0f49\0\u0f74\0\u012d\0\u0f9f\0\u0fca\0\126\0\u0ff5\0\u012d"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u012d\0\u012d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u012d\0\u012d"+
    "\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u012d\0\u1428\0\u012d\0\u012d"+
    "\0\u1453\0\u012d\0\u012d\0\u147e\0\u14a9\0\u14d4\0\u012d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\7\6\10\1\3"+
    "\1\11\1\3\1\10\1\3\1\12\1\13\1\14\2\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\10\1\25\1\10\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\26\37\1\40\24\37\54\0"+
    "\1\4\4\0\6\41\3\0\1\41\2\0\1\42\20\41"+
    "\12\0\1\5\1\0\1\5\51\0\1\43\10\0\1\44"+
    "\44\0\1\45\45\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\20\10\10\0\4\11\1\0\10\11\1\46\1\47"+
    "\34\11\1\0\1\4\20\0\1\42\31\0\1\50\52\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\1\10\1\51"+
    "\1\10\1\52\10\10\1\53\3\10\11\0\1\10\4\0"+
    "\3\10\1\54\2\10\3\0\2\10\2\0\20\10\11\0"+
    "\1\10\4\0\1\10\1\55\1\56\3\10\3\0\2\10"+
    "\2\0\20\10\11\0\1\10\4\0\3\10\1\57\2\10"+
    "\3\0\2\10\2\0\7\10\1\60\10\10\11\0\1\10"+
    "\4\0\1\10\1\61\4\10\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\1\10\1\62\1\63\3\10\3\0"+
    "\2\10\2\0\20\10\11\0\1\10\4\0\4\10\1\64"+
    "\1\10\3\0\2\10\2\0\20\10\11\0\1\10\4\0"+
    "\1\10\1\65\4\10\3\0\2\10\2\0\20\10\11\0"+
    "\1\10\4\0\5\10\1\66\3\0\2\10\2\0\5\10"+
    "\1\67\6\10\1\70\3\10\11\0\1\10\4\0\1\71"+
    "\5\10\3\0\2\10\2\0\20\10\11\0\1\10\4\0"+
    "\1\10\1\72\4\10\3\0\2\10\2\0\20\10\21\0"+
    "\1\73\41\0\4\43\1\0\46\43\14\44\1\74\36\44"+
    "\7\0\1\75\43\0\4\11\1\0\46\11\1\0\1\50"+
    "\4\0\6\41\3\0\1\41\3\0\20\41\11\0\1\10"+
    "\4\0\1\10\1\76\4\10\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\6\10"+
    "\1\77\11\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\11\10\1\100\6\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\2\10\1\101\15\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\1\102\17\10\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\5\10\1\103"+
    "\12\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\7\10\1\104\10\10\11\0\1\10\4\0\5\10\1\105"+
    "\3\0\2\10\2\0\20\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\10\10\1\106\7\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\5\10\1\107\12\10"+
    "\11\0\1\10\4\0\5\10\1\110\3\0\2\10\2\0"+
    "\20\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\12\10\1\111\5\10\11\0\1\10\4\0\4\10\1\112"+
    "\1\10\3\0\2\10\2\0\4\10\1\113\13\10\11\0"+
    "\1\10\4\0\3\10\1\114\2\10\3\0\2\10\2\0"+
    "\10\10\1\115\7\10\11\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\10\10\1\116\7\10\11\0\1\10\4\0"+
    "\2\10\1\117\3\10\3\0\2\10\2\0\20\10\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\6\10\1\120"+
    "\11\10\35\0\1\121\25\0\3\44\1\122\10\44\1\74"+
    "\36\44\10\0\1\123\43\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\2\10\1\124\15\10\11\0\1\10\4\0"+
    "\6\10\3\0\2\10\2\0\6\10\1\125\11\10\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\1\126\17\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\12\10"+
    "\1\127\5\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\1\130\17\10\11\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\4\10\1\131\13\10\11\0\1\10\4\0"+
    "\6\10\3\0\2\10\2\0\1\132\17\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\10\10\1\133\7\10"+
    "\11\0\1\10\4\0\3\10\1\134\2\10\3\0\2\10"+
    "\2\0\20\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\1\10\1\135\16\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\13\10\1\136\4\10\11\0\1\10"+
    "\4\0\3\10\1\137\2\10\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\2\10\1\140\3\10\3\0\2\10"+
    "\2\0\20\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\1\141\17\10\11\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\5\10\1\142\12\10\11\0\1\10\4\0"+
    "\6\10\3\0\2\10\2\0\10\10\1\143\7\10\11\0"+
    "\1\10\4\0\4\10\1\144\1\10\3\0\2\10\2\0"+
    "\20\10\11\0\1\10\4\0\2\10\1\145\3\10\3\0"+
    "\2\10\2\0\20\10\45\0\1\146\26\0\1\147\42\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\3\10\1\150"+
    "\14\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\3\10\1\151\14\10\11\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\1\10\1\152\16\10\11\0\1\10\4\0"+
    "\5\10\1\153\3\0\2\10\2\0\20\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\3\10\1\154\14\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\11\10"+
    "\1\155\6\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\6\10\1\156\11\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\6\10\1\157\11\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\12\10\1\160\5\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\5\10"+
    "\1\161\12\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\6\10\1\162\11\10\11\0\1\10\4\0\2\10"+
    "\1\163\3\10\3\0\2\10\2\0\20\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\6\10\1\164\11\10"+
    "\11\0\1\10\4\0\4\10\1\165\1\10\3\0\2\10"+
    "\2\0\20\10\23\0\1\166\51\0\1\167\41\0\1\10"+
    "\4\0\2\10\1\170\3\10\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\16\10"+
    "\1\171\1\10\11\0\1\10\4\0\1\10\1\172\4\10"+
    "\3\0\2\10\2\0\20\10\11\0\1\10\4\0\2\10"+
    "\1\173\3\10\3\0\2\10\2\0\20\10\11\0\1\10"+
    "\4\0\1\10\1\174\4\10\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\4\10\1\175\1\10\3\0\2\10"+
    "\2\0\20\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\10\10\1\176\7\10\11\0\1\10\4\0\5\10"+
    "\1\177\3\0\2\10\2\0\20\10\11\0\1\10\4\0"+
    "\1\10\1\200\4\10\3\0\2\10\2\0\20\10\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\3\10\1\201"+
    "\14\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\16\10\1\202\1\10\21\0\1\203\42\0\1\10\4\0"+
    "\6\10\3\0\2\10\2\0\6\10\1\204\11\10\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\2\10\1\205"+
    "\15\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\6\10\1\206\11\10\11\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\12\10\1\207\5\10\11\0\1\10\4\0"+
    "\3\10\1\210\2\10\3\0\2\10\2\0\20\10\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\14\10\1\211"+
    "\3\10\11\0\1\10\4\0\2\10\1\212\3\10\3\0"+
    "\2\10\2\0\20\10\11\0\1\10\4\0\3\10\1\213"+
    "\2\10\3\0\2\10\2\0\20\10\23\0\1\43\40\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\14\10\1\214"+
    "\3\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\3\10\1\215\14\10\11\0\1\10\4\0\4\10\1\216"+
    "\1\10\3\0\2\10\2\0\20\10\11\0\1\10\4\0"+
    "\6\10\3\0\2\10\2\0\13\10\1\217\4\10\11\0"+
    "\1\10\4\0\5\10\1\220\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\2\10"+
    "\1\221\15\10\11\0\1\10\4\0\1\10\1\222\4\10"+
    "\3\0\2\10\2\0\20\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\6\10\1\223\11\10\11\0\1\10"+
    "\4\0\2\10\1\224\3\10\3\0\2\10\2\0\20\10"+
    "\11\0\1\10\4\0\2\10\1\225\3\10\3\0\2\10"+
    "\2\0\20\10\11\0\1\10\4\0\6\10\3\0\2\10"+
    "\2\0\3\10\1\226\14\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\3\10\1\227\14\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\17\10\1\230\11\0"+
    "\1\10\4\0\6\10\3\0\2\10\2\0\12\10\1\231"+
    "\5\10\11\0\1\10\4\0\6\10\3\0\2\10\2\0"+
    "\3\10\1\232\14\10\11\0\1\10\4\0\6\10\3\0"+
    "\2\10\2\0\1\233\17\10\11\0\1\10\4\0\6\10"+
    "\3\0\2\10\2\0\5\10\1\234\12\10\11\0\1\10"+
    "\4\0\6\10\3\0\2\10\2\0\10\10\1\235\7\10"+
    "\11\0\1\10\4\0\6\10\3\0\2\10\2\0\5\10"+
    "\1\236\12\10\11\0\1\10\4\0\2\10\1\237\3\10"+
    "\3\0\2\10\2\0\20\10\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5375];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\23\1\11\11\1\1\1\11\1\0\2\1"+
    "\1\0\1\11\24\1\3\0\23\1\1\0\1\11\1\0"+
    "\22\1\2\0\16\1\1\11\1\0\13\1\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1796) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return ShaderLabTokens.LBRACE;
          }
        case 38: break;
        case 28: 
          { return ShaderLabTokens.ZWRITE_KEYWORD;
          }
        case 39: break;
        case 7: 
          { return ShaderLabTokens.RBRACE;
          }
        case 40: break;
        case 30: 
          { return ShaderLabTokens.FALLBACK_KEYWORD;
          }
        case 41: break;
        case 24: 
          { return ShaderLabTokens.FRONT_KEYWORD;
          }
        case 42: break;
        case 23: 
          { return ShaderLabTokens.ENDCG_KEYWORD;
          }
        case 43: break;
        case 25: 
          { return ShaderLabTokens.COLOR_KEYWORD;
          }
        case 44: break;
        case 12: 
          { return ShaderLabTokens.COMMA;
          }
        case 45: break;
        case 33: 
          { yybegin(SHADERSCRIPT); return ShaderLabTokens.CGINCLUDE_KEYWORD;
          }
        case 46: break;
        case 15: 
          { return ShaderLabTokens.LINE_COMMENT;
          }
        case 47: break;
        case 9: 
          { return ShaderLabTokens.RPAR;
          }
        case 48: break;
        case 21: 
          { return ShaderLabTokens.BACK_KEYWORD;
          }
        case 49: break;
        case 35: 
          { return ShaderLabTokens.SET_TEXTURE_KEYWORD;
          }
        case 50: break;
        case 10: 
          { return ShaderLabTokens.LBRACKET;
          }
        case 51: break;
        case 4: 
          { return ShaderLabTokens.IDENTIFIER;
          }
        case 52: break;
        case 27: 
          { return ShaderLabTokens.SHADER_KEYWORD;
          }
        case 53: break;
        case 20: 
          { return ShaderLabTokens.TAGS_KEYWORD;
          }
        case 54: break;
        case 16: 
          { return ShaderLabTokens.BLOCK_COMMENT;
          }
        case 55: break;
        case 5: 
          { return ShaderLabTokens.STRING_LITERAL;
          }
        case 56: break;
        case 31: 
          { return ShaderLabTokens.LIGHTING_KEYWORD;
          }
        case 57: break;
        case 34: 
          { yybegin(SHADERSCRIPT); return ShaderLabTokens.CGPROGRAM_KEYWORD;
          }
        case 58: break;
        case 29: 
          { return ShaderLabTokens.MATRIX_KEYWORD;
          }
        case 59: break;
        case 26: 
          { yybegin(YYINITIAL); yypushback(5);
          }
        case 60: break;
        case 2: 
          { return ShaderLabTokens.INTEGER_LITERAL;
          }
        case 61: break;
        case 13: 
          { return ShaderLabTokens.EQ;
          }
        case 62: break;
        case 37: 
          { return ShaderLabTokens.CONSTANT_COLOR_KEYWORD;
          }
        case 63: break;
        case 1: 
          { return ShaderLabTokens.BAD_CHARACTER;
          }
        case 64: break;
        case 14: 
          { return ShaderLabTokens.SHADERSCRIPT;
          }
        case 65: break;
        case 19: 
          { return ShaderLabTokens.PASS_KEYWORD;
          }
        case 66: break;
        case 18: 
          { return ShaderLabTokens.OFF_KEYWORD;
          }
        case 67: break;
        case 36: 
          { return ShaderLabTokens.PROPERTIES_KEYWORD;
          }
        case 68: break;
        case 11: 
          { return ShaderLabTokens.RBRACKET;
          }
        case 69: break;
        case 8: 
          { return ShaderLabTokens.LPAR;
          }
        case 70: break;
        case 32: 
          { return ShaderLabTokens.SUBSHADER_KEYWORD;
          }
        case 71: break;
        case 22: 
          { return ShaderLabTokens.CULL_KEYWORD;
          }
        case 72: break;
        case 17: 
          { return ShaderLabTokens.ON_KEYWORD;
          }
        case 73: break;
        case 3: 
          { return ShaderLabTokens.WHITE_SPACE;
          }
        case 74: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
